set nocompatible
syntax on
set background=dark
colorscheme PaperColor
filetype on
filetype plugin on
filetype indent on
set number
set nocompatible
set relativenumber
set cursorline
"set cursorcolumn
set tabstop=4 softtabstop=4
set shiftwidth=4
set smarttab
set smartindent
set expandtab
set nobackup
set scrolloff=10
set nowrap
set showcmd
set showmode
set history=100
set encoding=utf-8
set noswapfile
set incsearch
set guicursor=
" enable folding
"set foldmethod=syntax
autocmd FileType rust setlocal foldmethod=syntax
autocmd FileType python setlocal foldmethod=indent
let g:jedi#environment_path = "/usr/bin/python3"

" show counter for search results
" https://stackoverflow.com/questions/49297579/how-to-count-search-results-in-vim
" https://vimhelp.org/options.txt.html#%27shortmess%27
set shortmess-=S

" Map the leader key to a comma.
let mapleader = ','

" remap Esc
inoremap jk <Esc>

" F5 to execute !python3 %
command! -nargs=0 RunPy !python3 %
nnoremap <F5> :RunPy<CR>

" https://vi.stackexchange.com/questions/356/how-can-i-set-up-a-ruler-at-a-specific-column
" https://stackoverflow.com/questions/1272173/in-vim-how-do-i-break-one-really-long-line-into-multiple-lines
set colorcolumn=80
set tw=80
set fo+=t

" automatic closing brackets
" https://stackoverflow.com/questions/21316727/automatic-closing-brackets-for-vim
inoremap " ""<left>
inoremap ' ''<left>
inoremap ( ()<left>
inoremap [ []<left>
inoremap { {}<left>
inoremap {<CR> {<CR>}<ESC>O
inoremap {;<CR> {<CR>};<ESC>O

" show full path to the file and show status always
" https://unix.stackexchange.com/questions/111558/how-can-i-constantly-see-the-current-filename-in-vim
set laststatus=2
set statusline+=%F

" autosave
" https://stackoverflow.com/questions/6991638/how-to-auto-save-a-file-every-1-second-in-vim/27387138#27387138
" autocmd TextChanged,TextChangedI * silent write

" insted of autosave - let's try to map a key to save
nnoremap zz :update<cr>

" exit vim only
nnoremap EE :q<cr>

" for YAML files
autocmd Filetype yaml setlocal ts=2 sts=2 sw=2 expandtab
let g:indentLine_char = 'â¦™'

" for markdown files
" autocmd BufNewFile,BufRead *.md set filetype=markdown
"set conceallevel=0
" autocmd FileType markdown setlocal conceallevel=0
" line below basically disables indentLine Plugin
augroup md
    autocmd!
    autocmd BufNewFile,BufRead *.md set filetype=markdown
    autocmd FileType markdown setlocal conceallevel=0
    autocmd BufAdd,BufRead *.md let g:indentLine_setConceal=0
augroup end

augroup json
    autocmd!
    autocmd BufNewFile,BufRead *.json set filetype=json
    autocmd FileType json setlocal conceallevel=0
    autocmd BufAdd,BufRead *.json let g:indentLine_setConceal=0
augroup end

" NERDTree
map <F4> :NERDTreeToggle<CR>"]

" NERD Commenter
filetype plugin on
" Create default mappings
let g:NERDCreateDefaultMappings = 1

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1

" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1

" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'

" tagbar conf
nmap <F8> :TagbarToggle<CR>

" for python
let g:python_highlight_all = 1

" for REST API
autocmd BufNewFile,BufRead *.http set filetype=rest
let g:vrc_horizontal_split=1

" for emmet-vim
let g:user_emmet_leader_key=','

" for ALE
let g:ale_completion_enabled = 1
set omnifunc=ale#completion#OmniFunc
let g:ale_completion_autoimport = 0

call plug#begin()

" go
Plug 'fatih/vim-go'

" for HTML
Plug 'mattn/emmet-vim'

" for YAML
Plug 'https://github.com/Yggdroot/indentLine'

" for CSV
Plug 'https://github.com/mechatroner/rainbow_csv'

" for Rust
" Plug 'rust-lang/rust.vim'

" for statusline
Plug 'itchyny/lightline.vim'

" NERDTree
Plug 'preservim/nerdtree'

" NERD Commenter
Plug 'preservim/nerdcommenter'

" tagbar
" to use install ctags
" https://github.com/universal-ctags/ctags
Plug 'preservim/tagbar'

" for python
" Plug 'vim-python/python-syntax'
" Plug 'davidhalter/jedi-vim'

" for REST API
Plug 'riccione/vim-rest-console'

Plug 'dense-analysis/ale'

call plug#end()
